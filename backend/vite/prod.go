//go:build !dev

package vite

import (
	"fmt"
	"html/template"
	"io/fs"
	"log"
	"net/http"
	"path/filepath"

	"plange"

	"github.com/olivere/vite"
)

var distFS fs.FS
var publicFS fs.FS

func init() {
	dist, err := fs.Sub(embedfs.FS, "frontend/dist")
	if err != nil {
		panic(fmt.Sprintf("unable to serve frontend: %v", err))
	}
	distFS = dist

	public, err := fs.Sub(embedfs.FS, "frontend/public")
	if err != nil {
		panic(fmt.Sprintf("unable to serve frontend: %v", err))
	}

	publicFS = public

	IsDev = false

	Adapter = MakeViteAdapter(
		http.FileServerFS(distFS),
		makeViteHandler,
		makePublicAssetHandler,
	)
}

func makePublicAssetHandler(path string) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// Serve the public files generated by Vite. By default, these files are
		// referenced in the DOM with a root-relative URL format (e.g. '/file.ext').
		http.ServeFileFS(w, r, publicFS, filepath.Base(r.URL.Path))
	})
}

func makeViteHandler(title string, path string) http.Handler {
	config := vite.Config{
		FS:           distFS,
		IsDev:        false,
		ViteTemplate: vite.React,
	}

	tmpl, err := template.New("index").Parse(indexTmpl)
	if err != nil {
		log.Panic(err)
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		viteFragment, err := vite.HTMLFragment(config)
		if err != nil {
			http.Error(w, "Error instantiating vite fragment", http.StatusInternalServerError)
			return
		}

		if err = tmpl.Execute(w, map[string]any{
			"Title": title,
			"Vite":  viteFragment,
		}); err != nil {
			http.Error(w, "Error executing template", http.StatusInternalServerError)
			return
		}
	})
}
